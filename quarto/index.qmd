---
title: "Analyse der Unfälle auf der Mariahilfer Straße"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-location: left
    code-fold: true
    code-summary: "Show Code"
editor: source
execute:
  echo: true
  warning: false
  message: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(here)
library(glue)
library(sf)
library(davR)
library(jsonlite)
library(mapview)
library(DatawRappr)
library(shadowtext)
```

# Entwicklung der Fahrradunfälle

```{r unfalle-in-und-nahe-mahue}
m <- mapview


# ++++++++++++++++++++++++++++++
# paths to data ----
# ++++++++++++++++++++++++++++++
path_unfaelle <- here("data_output/unfaelle.gpkg")
path_innere_mh <- here("data_output/innere_maria_hilfer.gpkg")

# ++++++++++++++++++++++++++++++
#  load and create  data ----
# ++++++++++++++++++++++++++++++

# UNFALLE ----
geo_unfaelle <- read_sf(path_unfaelle) %>% st_transform(31287)
geo_unfaelle_bike <- geo_unfaelle %>%
    filter(str_detect(BETEILIGUNG, "(?i)fahrrad|e[- ]?bike|scooter"))

# ROIs ----
geo_mh_line <- read_sf(path_innere_mh)

# buffer line
geo_mh_buff_13m <- st_buffer(geo_mh_line, 13) %>% summarise()

# buffer near area
geo_mh_buff_1km <- st_buffer(geo_mh_buff_13m, 1000, singleSide = T)

# ++++++++++++++++++++++++++++++
# analyse ----
# ++++++++++++++++++++++++++++++

# create near zone (1km buffer without the street)
geo_mh_buff_near <- st_difference(geo_mh_buff_1km, geo_mh_buff_13m)

# accidents on the  mh
unfaelle_on_mh <- geo_unfaelle_bike %>%
    st_filter(geo_mh_buff_13m)

unfaelle_on_mh_count <- unfaelle_on_mh %>%
    count(JAHR, name = "accidents_on_mh")

# accidents near the mh
unfaelle_near_mh <- geo_unfaelle_bike %>%
    st_filter(geo_mh_buff_near)

unfaelle_near_mh_count <- unfaelle_near_mh %>%
    count(JAHR, name = "accidents_near_mh")

# accidents in all of vienna
unfaelle_vienna <- geo_unfaelle_bike %>%
    st_filter(geo_mh_buff_1km, .predicate = st_disjoint) %>%
    st_filter(geo_mh_buff_near, .predicate = st_disjoint)

unfaelle_vienna_count <- unfaelle_vienna %>%
    count(JAHR, name = "accidents_vienna")


# remove sf class from the data
unfaelle_on_mh_count <- unfaelle_on_mh_count %>% st_drop_geometry()
unfaelle_near_mh_count <- unfaelle_near_mh_count %>% st_drop_geometry()
unfaelle_vienna_count <- unfaelle_vienna_count %>% st_drop_geometry()

accident_counts <- full_join(unfaelle_on_mh_count, unfaelle_near_mh_count, by = "JAHR") %>%
    full_join(unfaelle_vienna_count, by = "JAHR") %>%
    arrange(JAHR)

# view the result
# print(accident_counts)

# calculate indexed values for comparison
accident_rates <- accident_counts %>%
    mutate(
        across(
            starts_with("accidents"),
            ~ . / first(.) * 100,
            .names = "{.col}_indexed"
        )
    )

dw_data_to_chart(accident_rates, "1blwP")
dw_data_to_chart(accident_rates, "0tHdu")
```



<iframe title="Auf der Mahü sinken die Unfälle im Vergleich zu 2013" aria-label="Liniendiagramm" id="datawrapper-chart-1blwP" src="https://datawrapper.dwcdn.net/1blwP/1/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="452" data-external="1"></iframe><script type="text/javascript">window.addEventListener("message",function(a){if(void 0!==a.data["datawrapper-height"]){var e=document.querySelectorAll("iframe");for(var t in a.data["datawrapper-height"])for(var r,i=0;r=e[i];i++)if(r.contentWindow===a.source){var d=a.data["datawrapper-height"][t]+"px";r.style.height=d}}});</script>


<iframe title="Während Corona besonders viele Fahrradunfälle auf der Mahü" aria-label="Säulen" id="datawrapper-chart-0tHdu" src="https://datawrapper.dwcdn.net/0tHdu/1/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="534" data-external="1"></iframe><script type="text/javascript">window.addEventListener("message",function(a){if(void 0!==a.data["datawrapper-height"]){var e=document.querySelectorAll("iframe");for(var t in a.data["datawrapper-height"])for(var r,i=0;r=e[i];i++)if(r.contentWindow===a.source){var d=a.data["datawrapper-height"][t]+"px";r.style.height=d}}});</script>


# Anteil der Fahrradunfälle an allen Unfällen

```{r}
# Anzahl der Fahrradunfälle in jeder Region
bike_accidents_on_mh_count <- nrow(unfaelle_on_mh)
bike_accidents_near_mh_count <- nrow(unfaelle_near_mh)
bike_accidents_vienna_count <- nrow(unfaelle_vienna)


# Gesamtzahl der Unfälle in jeder Region
total_accidents_on_mh_count <- geo_unfaelle %>%
    st_filter(geo_mh_buff_13m) %>%
    nrow()

total_accidents_near_mh_count <- geo_unfaelle %>%
    st_filter(geo_mh_buff_near) %>%
    nrow()

total_accidents_vienna_count <- geo_unfaelle %>%
    st_filter(geo_mh_buff_13m, .predicate = st_disjoint) %>%
    st_filter(geo_mh_buff_near, .predicate = st_disjoint) %>%
    nrow()

# Erstellen einer Tabelle mit den Ergebnissen
accident_shares <- tibble(
    Region = c("Auf der Mariahilferstraße", "Nahe der Mariahilferstraße", "Rest von Wien"),
    Bike_Accidents = c(bike_accidents_on_mh_count, bike_accidents_near_mh_count, bike_accidents_vienna_count),
    Total_Accidents = c(total_accidents_on_mh_count, total_accidents_near_mh_count, total_accidents_vienna_count)
) %>%
    mutate(Share_Bike_Accidents_Percent = (Bike_Accidents / Total_Accidents) * 100)

# Das Ergebnis anzeigen
knitr::kable(accident_shares, digits = 2, caption = "Anteil der Fahrradunfälle an den Gesamtunfällen")
```


# Zeitpunkt der Fahrradunfälle

```{r wann-unfaelle-mahue}
# ++++++++++++++++++++++++++++++
#  load and create  data ----
# ++++++++++++++++++++++++++++++

# UNFALLE ----
geo_unfaelle <- read_sf(path_unfaelle) %>% st_transform(31287)
geo_unfaelle_bike <- geo_unfaelle %>%
    filter(str_detect(BETEILIGUNG, "(?i)fahrrad|e[- ]?bike|scooter"))

# ROIs ----
geo_mh_line <- read_sf(path_innere_mh)
geo_mh_buff_13m <- st_buffer(geo_mh_line, 13) %>% summarise()

# create near zone (1km buffer without the street)
geo_mh_buff_1km <- st_buffer(geo_mh_buff_13m, 1000)
geo_mh_buff_near <- st_difference(geo_mh_buff_1km, geo_mh_buff_13m)


# ++++++++++++++++++++++++++++++
# analyse ----
# ++++++++++++++++++++++++++++++

# accidents on the mh by time of day and weekday
unfaelle_on_mh_by_time <- geo_unfaelle_bike %>%
    st_filter(geo_mh_buff_13m) %>%
    st_drop_geometry() %>%
    count(UHRZEIT, WOCHENTAG, name = "n") %>%
    mutate(region = "On Mariahilferstr.")

# accidents near the mh by time of day and weekday
unfaelle_near_mh_by_time <- geo_unfaelle_bike %>%
    st_filter(geo_mh_buff_near) %>%
    st_drop_geometry() %>%
    count(UHRZEIT, WOCHENTAG, name = "n") %>%
    mutate(region = "Near Mariahilferstr.")

# accidents in rest of vienna by time of day and weekday
unfaelle_vienna_by_time <- geo_unfaelle_bike %>%
    st_filter(geo_mh_buff_13m, .predicate = st_disjoint) %>%
    st_filter(geo_mh_buff_near, .predicate = st_disjoint) %>%
    st_drop_geometry() %>%
    count(UHRZEIT, WOCHENTAG, name = "n") %>%
    mutate(region = "Rest of Vienna")

# combine data
all_accidents_by_time_weekday <- bind_rows(
    unfaelle_on_mh_by_time,
    unfaelle_near_mh_by_time,
    unfaelle_vienna_by_time
)

# Translate weekdays to German and order factors for plotting
time_order <- c(
    "0 bis 6 Uhr",
    "6 bis 9 Uhr",
    "9 bis 12 Uhr",
    "12 bis 15 Uhr",
    "15 bis 18 Uhr",
    "18 bis 24 Uhr"
)
weekday_order_de <- c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")

all_accidents_by_time_weekday <- all_accidents_by_time_weekday %>%
    mutate(
        WOCHENTAG = recode(
            WOCHENTAG,
            "Mon" = "Mo",
            "Tue" = "Di",
            "Wed" = "Mi",
            "Thu" = "Do",
            "Fri" = "Fr",
            "Sat" = "Sa",
            "Sun" = "So"
        ),
        UHRZEIT = factor(UHRZEIT, levels = rev(time_order)),
        WOCHENTAG = factor(WOCHENTAG, levels = weekday_order_de)
    )

# ++++++++++++++++++++++++++++++
# plot heatmaps ----
# ++++++++++++++++++++++++++++++

# Plot for "On Mariahilferstr."
plot_on_mh <- all_accidents_by_time_weekday %>%
    filter(region == "On Mariahilferstr.") %>%
    ggplot(aes(x = WOCHENTAG, y = UHRZEIT, fill = n)) +
    geom_tile(color = "white", size = 0.5) +
    geom_shadowtext(
        aes(label = n),
        color = "black",
        bg.color = "white",
        bg.r = 0.05,
        size = 3
    ) +
    coord_equal() +
    scale_fill_viridis_c(option = "plasma", direction = -1) +
    theme_minimal(base_size = 12) +
    labs(
        title = "Unfälle auf der Mariahilfer Straße",
        x = NULL,
        y = NULL,
        fill = "Anzahl Unfälle"
    ) +
    theme(
        plot.title = element_text(face = "bold", size = 16),
        axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none"
    )

# Plot for "Near Mariahilferstr."
plot_near_mh <- all_accidents_by_time_weekday %>%
    filter(region == "Near Mariahilferstr.") %>%
    ggplot(aes(x = WOCHENTAG, y = UHRZEIT, fill = n)) +
    geom_tile(color = "white", size = 0.5) +
    geom_shadowtext(
        aes(label = n),
        color = "black",
        bg.color = "white",
        bg.r = 0.05,
        size = 3
    ) +
    coord_equal() +
    scale_fill_viridis_c(option = "plasma", direction = -1) +
    theme_minimal(base_size = 12) +
    labs(
        title = "Unfälle nahe der Mariahilfer Straße (1km Puffer)",
        x = NULL,
        y = NULL,
        fill = "Anzahl Unfälle"
    ) +
    theme(
        plot.title = element_text(face = "bold", size = 16),
        axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none"
    )

# Plot for "Rest of Vienna"
plot_vienna <- all_accidents_by_time_weekday %>%
    filter(region == "Rest of Vienna") %>%
    ggplot(aes(x = WOCHENTAG, y = UHRZEIT, fill = n)) +
    geom_tile(color = "white", size = 0.5, show.legend = F) +
    geom_shadowtext(
        aes(label = n),
        color = "black",
        bg.color = "white",
        bg.r = 0.12,
        size = 3
    ) +
    coord_equal() +
    scale_fill_viridis_c(option = "plasma", direction = -1) +
    theme_minimal(base_size = 12) +
    labs(
        title = "Unfälle im Rest von Wien",
        x = NULL,
        y = NULL,
        fill = "Anzahl Unfälle",
        fill = NULL
    ) +
    theme(
        plot.title = element_text(face = "bold", size = 16),
        axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none"
    )

# Print the plots
print(plot_on_mh)
print(plot_near_mh)
print(plot_vienna)
```

